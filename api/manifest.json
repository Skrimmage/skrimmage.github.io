{"__page":{"path":"/","frontMatter":{"title":"Skrimmage - Open Source Statistics","hide_title":true,"description":"Your home for Open Source Statistics!","og":{"title":"Skrimmage - Open Source Statistics","description":"Your home for Open Source Statistics!","image":"/wordmark.png"},"twitter":{"site":"@skrimmagesports"}},"queries":[],"content":"---\ntitle: Skrimmage - Open Source Statistics\nhide_title: true\ndescription: Your home for Open Source Statistics! \nog:\n  title: Skrimmage - Open Source Statistics\n  description: Your home for Open Source Statistics!\n  image: /wordmark.png\ntwitter:\n  site: '@skrimmagesports'\n---\n\n![wordmark](/wordmark.png)\n\n*Your home for Open Source Statistics!*\n\n---\n\n## Sports\n\n- [Formula One](/sports/F1)\n- [NHL](/sports/NHL)\n- More coming soon!\n\n## Resources\n\n- [Sports Analytics Articles](/resources/articles)\n- [Data](/resources/data)\n- [Programmer Libraries](/resources/libraries)\n\n## Community\n\n- [Contribute on Github](https://github.com/Skrimmage/Data-Platform)\n- [Blue Sky](https://bsky.app/profile/danny.page)\n- [Email Questions/Comments](mailto:danny@skrimmage.com)\n- [Mastodon Server](https://mastodon.skrimmage.com)\n  - Make sure that you mention this page when you sign up to join!"},"about":{"__page":{"path":"/about","frontMatter":{"title":"About Skrimmage"},"queries":[],"content":"---\ntitle: About Skrimmage\n---\n\nSkrimmage is the all-comprehensive site for Sports Analytics and Games Research. Dive deep into a treasure trove of aggregate stats, access an extensive library of free sports data, and discover cutting-edge machine learning analysis tailored for the modern sports enthusiast. Whether you're a casual fan, a data-driven coach, or a budding analyst, Skrimmage is your ultimate destination for insights that transcend the game.\n\n## Stack\n\n**Sources:** Various league APIs. Noted at the base level of each sport.\n\n**Backend:** [Dagster](https://dagster.io/) to pull and transform data. Hosted on Raspberry Pi 400.\n\n**Frontend:** [Evidence.dev](https://evidence.dev/) to build static pages. \n\n**Code:** [Skrimmage Data Platform](https://github.com/Skrimmage/Data-Platform) - Github actions look for any changes to the front end and push them to [Github Pages](https://github.com/Skrimmage/skrimmage.github.io) and hosted by [Cloudflare](https://www.cloudflare.com/)\n\n## Ideals\n\nGetting started in sports analytics sometimes requires lots of scraping of sites. By using open source and league data, hopefully the Skrimmage project can set the foundation for those looking to jump in for the first time. As the data and processes improve, more advanced statistics and machine learning models will also be open sourced and included. \n\n---\n\nFollow me, Danny Page, [on Mastodon](https://mastodon.skrimmage.com/@danny), or [Blue Sky](https://bsky.app/profile/danny.page). Also you can [email](mailto:danny@skrimmage.com)!"}},"contribute":{"__page":{"path":"/contribute","frontMatter":{"title":"Contribute to Skrimmage"},"queries":[],"content":"---\ntitle: Contribute to Skrimmage\n---\n\nAdd issues or pull requests to the [Skrimmage Data Platform](https://github.com/Skrimmage/Data-Platform)\n\nThings that we are looking for:\n\n- New Data Sources\n    - If you have public and open data, that can be added to the [Resources file](https://github.com/Skrimmage/Data-Platform/blob/main/skrimmage/resources.py).\n- Data Transformations\n    - After the API and Download information is available as a Resource within Dagster, we can create a pipeline that will pull that data. This will go into the [Assets folder](https://github.com/Skrimmage/Data-Platform/tree/main/skrimmage/assets).\n- Data Analysis Front-end\n    - New SQL queries\n        - Lots of the sports pages will reuse the same queries. Those can be stored at the top-level. For example, the [F1 Queries](https://github.com/Skrimmage/Data-Platform/tree/main/frontend/sources/f1) help reduce the need for copying the same queries and allow them to be cached at build time.\n    - Markdown pages with Charts and Tables\n        - Plenty of examples of this in the [Sports](https://github.com/Skrimmage/Data-Platform/tree/main/frontend/pages/sports) directory. \n"}},"resources":{"__page":{"path":"/resources","frontMatter":{"title":"Skrimmage - Resources"},"queries":[],"content":"---\ntitle: Skrimmage - Resources\n---\n\n- [Sports Analytics Articles](/resources/articles)\n- [Data](/resources/data)\n- [Programmer Libraries](/resources/libraries)"},"articles":{"__page":{"path":"/resources/articles","frontMatter":{"title":"Sports Analytics Articles"},"queries":[],"content":"---\ntitle: Sports Analytics Articles \n---\n\n## TODO\n\n- Add data from Metahockey and other resources"}},"data":{"__page":{"path":"/resources/data","frontMatter":{"title":"Skrimmage Data Downloads"},"queries":[],"content":"---\ntitle: Skrimmage Data Downloads\n---\n\n## TODO\n\n- Make Zips and Databases available"}},"libraries":{"__page":{"path":"/resources/libraries","frontMatter":{"title":"Analytics Libraries"},"queries":[],"content":"---\ntitle: Analytics Libraries\n---\n\n## TODO\n\n- Add various helpful programming & API libraries"}},"reports":{"__page":{"path":"/resources/reports","frontMatter":{"title":"Skrimmage - Reports"},"queries":[],"content":"---\ntitle: Skrimmage - Reports\n---\n\n---\n\n<div class=\"card\">\n   <a href=\"most_competitive_f1_seasons/\"><h2>Most Competitive F1 Seasons</h2></a> <br>A rough estimation of the closest seasons in Formula One history.\n</div>"},"most_competitive_f1_seasons":{"__page":{"path":"/resources/reports/most_competitive_f1_seasons","frontMatter":{"title":"Most Competitive F1 Seasons","sources":[{"competitive_seasons":"reports/most_competitive_f1_seasons.sql"}]},"queries":[{"id":"competitive_seasons","compiledQueryString":"WITH race_count\n     AS (SELECT Count(raceid) num_of_races,\n                Max(raceid)   max_race,\n                year\n         FROM   'sources/races.csv'\n         GROUP  BY year),\n     race_and_year\n     AS (SELECT r.raceid,\n                year\n         FROM   'sources/races.csv' r),\n     top_points\n     AS (SELECT ry.raceid,\n                Max(Cast(ds.points AS INT)) top_points\n         FROM   race_and_year ry,\n                'sources/driver_standings.csv' ds\n         WHERE  ry.raceid = ds.raceid\n         GROUP  BY ry.raceid),\n     race_breakdowns\n     AS (SELECT ry.*,\n                Cast(ds.points AS INT)\n                   AS points,\n                Round(( Cast(ds.points AS FLOAT) / tp.top_points ) * 100, 1)\n                   AS percent_points,\n                ( Cast(max_race AS FLOAT) - Cast(ry.raceid AS\n                FLOAT) ) / rc.num_of_races\n                   AS\n                percent_race\n         FROM   race_and_year ry,\n                'sources/driver_standings.csv' ds,\n                top_points tp,\n                race_count rc\n         WHERE  ry.raceid = ds.raceid\n                AND ry.raceid = tp.raceid\n                AND ry.year = rc.year),\n     close_driver_races\n     AS (SELECT raceid,\n                year,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 80 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_80,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 90 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_90,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 95 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_95,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 80\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_80,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 90\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_90,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 95\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_95\n         FROM   race_breakdowns rb\n         GROUP  BY raceid, year, percent_race)\nSELECT Max(year) as year,\n       ( Sum(close_drivers_80)\n         + Sum(close_drivers_90)\n         + Sum(close_drivers_95) )             points,\n       Sum(close_drivers_95),\n       Sum(close_drivers_90),\n       Sum(close_drivers_80),\n       Round(Sum(weighted_close_drivers_95)\n             + Sum(weighted_close_drivers_90)\n             + Sum(weighted_close_drivers_80)) AS weighted_points,\n       Round(Sum(weighted_close_drivers_95)),\n       Round(Sum(weighted_close_drivers_90)),\n       Round(Sum(weighted_close_drivers_80))\nFROM   close_driver_races\nGROUP  BY year\nORDER  BY points DESC, weighted_points DESC","inputQueryString":"WITH race_count\n     AS (SELECT Count(raceid) num_of_races,\n                Max(raceid)   max_race,\n                year\n         FROM   'sources/races.csv'\n         GROUP  BY year),\n     race_and_year\n     AS (SELECT r.raceid,\n                year\n         FROM   'sources/races.csv' r),\n     top_points\n     AS (SELECT ry.raceid,\n                Max(Cast(ds.points AS INT)) top_points\n         FROM   race_and_year ry,\n                'sources/driver_standings.csv' ds\n         WHERE  ry.raceid = ds.raceid\n         GROUP  BY ry.raceid),\n     race_breakdowns\n     AS (SELECT ry.*,\n                Cast(ds.points AS INT)\n                   AS points,\n                Round(( Cast(ds.points AS FLOAT) / tp.top_points ) * 100, 1)\n                   AS percent_points,\n                ( Cast(max_race AS FLOAT) - Cast(ry.raceid AS\n                FLOAT) ) / rc.num_of_races\n                   AS\n                percent_race\n         FROM   race_and_year ry,\n                'sources/driver_standings.csv' ds,\n                top_points tp,\n                race_count rc\n         WHERE  ry.raceid = ds.raceid\n                AND ry.raceid = tp.raceid\n                AND ry.year = rc.year),\n     close_driver_races\n     AS (SELECT raceid,\n                year,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 80 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_80,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 90 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_90,\n                Sum(CASE\n                      WHEN Cast(percent_points AS FLOAT) > 95 THEN 1\n                      ELSE 0\n                    END) - 1                    AS close_drivers_95,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 80\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_80,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 90\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_90,\n                percent_race * ( Sum(CASE\n                                       WHEN Cast(percent_points AS FLOAT) > 95\n                                     THEN 1\n                                       ELSE 0\n                                     END) - 1 ) AS weighted_close_drivers_95\n         FROM   race_breakdowns rb\n         GROUP  BY raceid, year, percent_race)\nSELECT Max(year) as year,\n       ( Sum(close_drivers_80)\n         + Sum(close_drivers_90)\n         + Sum(close_drivers_95) )             points,\n       Sum(close_drivers_95),\n       Sum(close_drivers_90),\n       Sum(close_drivers_80),\n       Round(Sum(weighted_close_drivers_95)\n             + Sum(weighted_close_drivers_90)\n             + Sum(weighted_close_drivers_80)) AS weighted_points,\n       Round(Sum(weighted_close_drivers_95)),\n       Round(Sum(weighted_close_drivers_90)),\n       Round(Sum(weighted_close_drivers_80))\nFROM   close_driver_races\nGROUP  BY year\nORDER  BY points DESC, weighted_points DESC","compiled":false,"inline":false}],"content":"---\ntitle: Most Competitive F1 Seasons\nsources:\n  - competitive_seasons: reports/most_competitive_f1_seasons.sql\n---\n\nPoints is a calculation of the number of drivers within 80%, 90%, and 95% of the leader at each race. A driver being within 5% points of the leader counts as 3, 90%->2 points, 80%->1 point. \"Weighted Points\" gives more points for it happening later in the season, so a final race clash is weighted more than early races. The race 25% into the season gives 0.25 points per driver, while the last race gives 1 point per driver. This is not a very scientific algorithm, but hopefully it highlights the most exciting seasons in F1 for those who want to go and watch historical seasons on F1TV.\n\n- 2010 was the most competitive season, with 4 drivers potentially taking the championship in the final race. \n- 2012 had 7 different winners in the first 7 races, keeping the pack tight early, and resulting in a tight 2 way battle into the final race. \n- 2021 was a duel between Hamilton and Verstappen, which was tied going into the final race of the season and ending in _spectacular_ fashion. \n\n<DataTable data=\"{competitive_seasons}\">\n    <Column id=\"year\" title=\"Season\" />\n    <Column id=\"points\" />\n    <Column id=\"weighted_points\" />\n</DataTable>\n"}}}},"sports":{"__page":{"path":"/sports","frontMatter":{"title":"Skrimmage - Sports","hide_title":true},"queries":[],"content":"---\ntitle: Skrimmage - Sports\nhide_title: true\n---\n\n<h1 class=\"text-center title\">Sports Stats</h1>\n\n---\n\n<div class=\"text-center card\">\n   <a href=\"F1/\"><h2>Formula One</h2></a>\n<br>\n   <div>\n      <a href=\"F1/drivers/\" class=\"hover:underline\">Drivers</a> |\n      <a href=\"F1/races/\" class=\"hover:underline\">Races</a> |\n      <a href=\"F1/circuits/\" class=\"hover:underline\">Circuits</a>\n   </div>\n</div>\n\n---\n\n<div class=\"text-center card\" style=\"border: 1px solid; margin: 10px; padding: 10px; box-shadow: 5px 10px;\">\n   <a href=\"NHL/\" class=\"hover:underline\"><h2>NHL</h2></a> <br>\n\n   <div>\n        <a href=\"NHL/teams/\" class=\"hover:underline\">Teams</a>\n   </div>\n</div>"},"F1":{"__page":{"path":"/sports/F1","frontMatter":{"title":"Formula One"},"queries":[{"id":"drivers","compiledQueryString":"select CONCAT(forename, ' ', surname) as name,dob,nationality,url\nfrom 'sources/drivers.csv'","inputQueryString":"select CONCAT(forename, ' ', surname) as name,dob,nationality,url\nfrom 'sources/drivers.csv'","compiled":false,"inline":true}],"content":"---\ntitle: Formula One\n---\n\n## Stats\n- [Drivers](drivers/)\n- [Races](races/)\n- [Circuits](circuits/)\n\n### TODO:\n- Add winners instead of Wikipedia link on the index page\n- Move that into the detail page\n- Add current standings on this page\n\n\n---\n\n```sql drivers\nselect CONCAT(forename, ' ', surname) as name,dob,nationality,url\nfrom 'sources/drivers.csv'\n```\n\n---\n\nData via [Ergast Motor Racing Development API](https://ergast.com/mrd/) for now. It is being deprecated after the 2024 season, and Skrimmage will look into getting the data directly from the FIA in the future. \n\n"},"circuits":{"__page":{"path":"/sports/F1/circuits","frontMatter":{"title":"F1 Circuits","sources":[{"circuits":"f1/circuits.sql"}]},"queries":[{"id":"circuits","compiledQueryString":"select \n    circuitId,\n    circuitRef,\n    name,\n    location,\n    country,\n    lat,\n    lng,\n    alt,\n    url,\n    './' || circuitRef as circuit_link\nfrom 'sources/circuits.csv'","inputQueryString":"select \n    circuitId,\n    circuitRef,\n    name,\n    location,\n    country,\n    lat,\n    lng,\n    alt,\n    url,\n    './' || circuitRef as circuit_link\nfrom 'sources/circuits.csv'","compiled":false,"inline":false}],"content":"---\ntitle: F1 Circuits\nsources:\n  - circuits: f1/circuits.sql\n---\n\n## List of Circuits\n\n<DataTable data=\"{circuits}\" search=\"true\" link=circuit_link>\n    <Column id=\"name\" title=\"Name\" />\n    <Column id=\"location\" title=\"Location\" />\n    <Column id=\"country\" title=\"Country\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n"},"[circuitRef]":{"__page":{"path":"/sports/F1/circuits/[circuitRef]","frontMatter":{"sources":[{"circuits":"f1/circuits.sql"}]},"queries":[{"id":"circuits","compiledQueryString":"select \n    circuitId,\n    circuitRef,\n    name,\n    location,\n    country,\n    lat,\n    lng,\n    alt,\n    url,\n    './' || circuitRef as circuit_link\nfrom 'sources/circuits.csv'","inputQueryString":"select \n    circuitId,\n    circuitRef,\n    name,\n    location,\n    country,\n    lat,\n    lng,\n    alt,\n    url,\n    './' || circuitRef as circuit_link\nfrom 'sources/circuits.csv'","compiled":false,"inline":false}],"content":"---\nsources:\n  - circuits: f1/circuits.sql\n---\n\n# <Value data={circuits.filter(d => d.circuitRef.toUpperCase() === $page.params.circuitRef.toUpperCase())} column=name/>\n\n<DataTable data=\"{circuits.filter(d => d.circuitRef.toUpperCase() === $page.params.circuitRef.toUpperCase())}\">\n    <Column id=\"name\" title=\"Name\" />\n    <Column id=\"location\" title=\"Location\" />\n    <Column id=\"country\" title=\"Country\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n"}}},"drivers":{"__page":{"path":"/sports/F1/drivers","frontMatter":{"title":"F1 Drivers","sources":[{"drivers":"f1/drivers.sql"}]},"queries":[{"id":"drivers","compiledQueryString":"select \n    CONCAT(forename, ' ', surname) as name,\n    driverId,\n    dob,\n    nationality,\n    url,\n    driverRef,\n    './' || driverRef as driver_link\nfrom 'sources/drivers.csv'","inputQueryString":"select \n    CONCAT(forename, ' ', surname) as name,\n    driverId,\n    dob,\n    nationality,\n    url,\n    driverRef,\n    './' || driverRef as driver_link\nfrom 'sources/drivers.csv'","compiled":false,"inline":false}],"content":"---\ntitle: F1 Drivers\nsources:\n  - drivers: f1/drivers.sql\n---\n\n## List of drivers\n\n<DataTable data=\"{drivers}\" search=\"true\" link=driver_link>\n    <Column id=\"name\" title=\"Name\" />\n    <Column id=\"dob\" title=\"Date Of Birth\" />\n    <Column id=\"nationality\" title=\"Nationality\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n"},"[driverRef]":{"__page":{"path":"/sports/F1/drivers/[driverRef]","frontMatter":{"sources":[{"drivers":"f1/drivers.sql"}]},"queries":[{"id":"drivers","compiledQueryString":"select \n    CONCAT(forename, ' ', surname) as name,\n    driverId,\n    dob,\n    nationality,\n    url,\n    driverRef,\n    './' || driverRef as driver_link\nfrom 'sources/drivers.csv'","inputQueryString":"select \n    CONCAT(forename, ' ', surname) as name,\n    driverId,\n    dob,\n    nationality,\n    url,\n    driverRef,\n    './' || driverRef as driver_link\nfrom 'sources/drivers.csv'","compiled":false,"inline":false},{"id":"results","compiledQueryString":"select \n  *\nfrom 'sources/results.csv'","inputQueryString":"select \n  *\nfrom 'sources/results.csv'","compiled":false,"inline":true},{"id":"driver_cross_results","compiledQueryString":"select \n  d.driverId,\n  d.driverRef,\n  r.positionOrder,\n  r.points\nfrom ${drivers} d\nLEFT OUTER JOIN ${results} r\nON r.driverId = d.driverId","inputQueryString":"select \n  d.driverId,\n  d.driverRef,\n  r.positionOrder,\n  r.points\nfrom ${drivers} d\nLEFT OUTER JOIN ${results} r\nON r.driverId = d.driverId","compiled":false,"inline":true},{"id":"driver_wins","compiledQueryString":"select \n  sum(CASE WHEN positionOrder = 1 then 1 else 0 END) as wins,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by wins desc","inputQueryString":"select \n  sum(CASE WHEN positionOrder = 1 then 1 else 0 END) as wins,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by wins desc","compiled":false,"inline":true},{"id":"driver_podiums","compiledQueryString":"select \n  sum(CASE WHEN positionOrder <= 3 then 1 else 0 END) as podiums,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by podiums desc","inputQueryString":"select \n  sum(CASE WHEN positionOrder <= 3 then 1 else 0 END) as podiums,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by podiums desc","compiled":false,"inline":true},{"id":"driver_points","compiledQueryString":"select \n  sum(CAST(points as decimal)) as points,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by points desc","inputQueryString":"select \n  sum(CAST(points as decimal)) as points,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by points desc","compiled":false,"inline":true}],"content":"---\nsources:\n  - drivers: f1/drivers.sql\n---\n\n# <Value data={drivers.filter(d => d.driverRef.toUpperCase() === $page.params.driverRef.toUpperCase())} column=name/>\n\n<DataTable data=\"{drivers.filter(d => d.driverRef.toUpperCase() === $page.params.driverRef.toUpperCase())}\">\n    <Column id=\"dob\" title=\"Date Of Birth\" />\n    <Column id=\"nationality\" title=\"Nationality\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n\n<BigValue\n  data={driver_wins.filter(dw => dw.driverRef === $page.params.driverRef)}\n  value='wins'\n/>\n\n<BigValue\n  data={driver_podiums.filter(dw => dw.driverRef === $page.params.driverRef)}\n  value='podiums'\n/>\n\n<BigValue\n  data={driver_points.filter(dw => dw.driverRef === $page.params.driverRef)}\n  value='points'\n/>\n\n```results\nselect \n  *\nfrom 'sources/results.csv' \n```\n\n```driver_cross_results\nselect \n  d.driverId,\n  d.driverRef,\n  r.positionOrder,\n  r.points\nfrom ${drivers} d\nLEFT OUTER JOIN ${results} r\nON r.driverId = d.driverId\n```\n\n```driver_wins\nselect \n  sum(CASE WHEN positionOrder = 1 then 1 else 0 END) as wins,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by wins desc\n```\n\n```driver_podiums\nselect \n  sum(CASE WHEN positionOrder <= 3 then 1 else 0 END) as podiums,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by podiums desc\n```\n\n```driver_points\nselect \n  sum(CAST(points as decimal)) as points,\n  driverId,\n  driverRef\nfrom ${driver_cross_results} \ngroup by driverId, driverRef\norder by points desc\n```"}}},"races":{"__page":{"path":"/sports/F1/races","frontMatter":{"title":"F1 Races"},"queries":[{"id":"current_races","compiledQueryString":"select *,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\nwhere year = 2023\norder by date;","inputQueryString":"select *,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\nwhere year = 2023\norder by date;","compiled":false,"inline":true}],"content":"---\ntitle: F1 Races\n---\n\n## Current Schedule\n\n```sql current_races\nselect *,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\nwhere year = 2023\norder by date;\n```\n\n<DataTable data=\"{current_races}\" search=\"true\" link=race_link rows=all>\n    <Column id=\"name\" title=\"Name\" />\n    <Column id=\"date\" title=\"Date\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n\n[All historical races](./historical_races)"},"[year_race_name]":{"__page":{"path":"/sports/F1/races/[year_race_name]","queries":[{"id":"races","compiledQueryString":"select *,\nyear || '_' || REPLACE(name, ' ', '_') as year_race_name,\nname || ' - ' || year as name_year,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;","inputQueryString":"select *,\nyear || '_' || REPLACE(name, ' ', '_') as year_race_name,\nname || ' - ' || year as name_year,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;","compiled":false,"inline":true}],"content":"# <Value data={races.filter(r => r.year_race_name === $page.params.year_race_name)} column=name_year/>\n\n```sql races\nselect *,\nyear || '_' || REPLACE(name, ' ', '_') as year_race_name,\nname || ' - ' || year as name_year,\n'./' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;\n```"}},"historical_races":{"__page":{"path":"/sports/F1/races/historical_races","queries":[{"id":"all_races","compiledQueryString":"select *,\n'/sports/F1/races/' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;","inputQueryString":"select *,\n'/sports/F1/races/' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;","compiled":false,"inline":true}],"content":"## All Races\n\n```sql all_races\nselect *,\n'/sports/F1/races/' || year || '_' || REPLACE(name, ' ', '_') as race_link\nfrom 'sources/races.csv'\norder by date;\n```\n\n<DataTable data=\"{all_races}\" search=\"true\" link=race_link rows=20>\n    <Column id=\"name\" title=\"Name\" />\n    <Column id=\"date\" title=\"Date\" />\n    <Column id=\"url\" title=\"Wikipedia\" contentType=\"link\" openInNewTab=\"true\" />\n</DataTable>\n\n\n\n"}}}},"NHL":{"__page":{"path":"/sports/NHL","frontMatter":{"title":"NHL Data"},"queries":[],"content":"---\ntitle: NHL Data\n---\n\n## Stats\n- [Teams](teams/)\n\n## TODO\n\n- Populate outline directory, see F1"},"teams":{"__page":{"path":"/sports/NHL/teams","frontMatter":{"title":"NHL Teams"},"queries":[],"content":"---\ntitle: NHL Teams\n---\n"}}}},"updates":{"__page":{"path":"/updates","frontMatter":{"title":"Recent Updates"},"queries":[],"content":"---\ntitle: Recent Updates\n---\n\n- 2021/11/06\n  - Updating Structure of the pages, including the Resources folder\n    - Adding [Articles](/resources/articles/)\n    - Adding [Libraries](/resources/libraries/)\n  - Individual leagues are under the [Sports](/sports) folder. This will reduce the number of items in the sidebar.\n\n\n- 2023/11/03\n  - [F1](/sports/F1)\n    - Basic [driver](/sports/F1/drivers) info (Wins, Podiums, Points)\n    - [Races](/sports/F1/races)\n    - [Circuits](/sports/F1/circuits)\n  - [NHL](/sports/NHL)\n    - [Teams](/sports/NHL/teams) to be listed\n  - Site info\n    - [About Page](/about) created with stack info\n\n"}}}